{"meta":{"title":"趣開者","subtitle":"은퇴후에는 취미를 직업으로...","description":null,"author":"Phil Im","url":"http://philm2k.github.io"},"pages":[],"posts":[{"title":"파일 다루기(Treat with files, folders, etc)","slug":"python-with-file","date":"2018-03-31T08:43:02.000Z","updated":"2018-04-01T12:54:10.495Z","comments":true,"path":"2018/03/31/python-with-file/","link":"","permalink":"http://philm2k.github.io/2018/03/31/python-with-file/","excerpt":"","text":"특정 폴더에 가장 최근에 생성된 파일명 가져오기1. glob.glob을 이용하여 파일목록 가져오기123from glob import globlst_files = glob(\"D:/Dev/02. Python Data Analysis/DataScienceHandbook/*.ipynb\")lst_files[:5] 다음 그림은 그 결과 2. getctime을 이용하여 가장 최근에 생성된 파일명 찾기123from os.path import getctimelatest_file = max(lst_files, key=getctime)latest_file 다음 그림은 그 결과 Related Posts","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"H2","slug":"H2","permalink":"http://philm2k.github.io/tags/H2/"},{"name":"files","slug":"files","permalink":"http://philm2k.github.io/tags/files/"},{"name":"folders","slug":"folders","permalink":"http://philm2k.github.io/tags/folders/"}]},{"title":"Python How-To(C)","slug":"python-how-to-C","date":"2018-03-31T08:00:42.000Z","updated":"2018-04-01T12:54:10.490Z","comments":true,"path":"2018/03/31/python-how-to-C/","link":"","permalink":"http://philm2k.github.io/2018/03/31/python-how-to-C/","excerpt":"","text":"CClosure(클로저)클로저는 함수 본체에서 정의하지 않고 참조하는 비전역(nonglobal) 변수를 포함한 확장 범위를 가진 함수이며 익명 함수일 필요는 없다. 함수 본체 외부에 정의된 비전역 변수에 접근할 수 있다는 것이 중요하다. 루시아누 하말류전문가를 위한 파이썬 뭔 소린지 감은 잘 안 옵니다. ^^ Related Posts","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"H2","slug":"H2","permalink":"http://philm2k.github.io/tags/H2/"},{"name":"C","slug":"C","permalink":"http://philm2k.github.io/tags/C/"}]},{"title":"outlook으로 이메일 보내기","slug":"send-email-with-outlook","date":"2018-03-29T14:11:42.000Z","updated":"2018-04-01T12:54:10.501Z","comments":true,"path":"2018/03/29/send-email-with-outlook/","link":"","permalink":"http://philm2k.github.io/2018/03/29/send-email-with-outlook/","excerpt":"","text":"stackoverflow등 인터넷을 뒤지면서 찾은 python으로 email 보내는 소스입니다.pywin을 사용할 수도 있는 것 같은데 아래 소스는 win32를 이용한 방법입니다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import win32com.client as win32import psutilimport subprocessdef send_email(subject, body, recipients, cc, auto=True): \"\"\" 이메일 보내는 함수 Auto=True인 경우 바로 메일 발송 Auto=False인 경우 메일 보내기 위한 편지 화면을 Display \"\"\" outlook = wind32.Dispatch('outlook.application') mail = outlook.CreateItem(0) if type(recipients) == list: mail.To = \";\".join(recipients) else: mail.To = recipients if type(cc) == list: mail.CC = \";\".join(cc) else: mail.CC = cc mail.Subject = subject mail.HtmlBody = body if auto: mail.send else: mail.Display(True)def open_outlook(): \"\"\" 오피스 버전에 따라 위치는 조금씩 다름 \"\"\" try: subprocess.call(['c:\\Program Files\\Microsoft Office\\Office14\\Outlook.exe']) os.system(['c:\\Program Files\\Microsoft Office\\Office14\\Outlook.exe']) except: print(\"Outlook open 실패!!!\")# outlook이 실행중이면 flag = 1, 아니면 flag = 0for item in psutil.pids(): p = psutil.Process(item) if p.name() == \"Outlook.com\": flag = 1 break else: flag = 0if (flag != 1): open_outlook()send_email(\"제목\",\"이메일 발송 테스트\",\"gdhong@abcdef.com\", \"wcjeon@abcdef.com\") Related Posts","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"Outlook","slug":"Outlook","permalink":"http://philm2k.github.io/tags/Outlook/"},{"name":"H2","slug":"H2","permalink":"http://philm2k.github.io/tags/H2/"},{"name":"Send Email","slug":"Send-Email","permalink":"http://philm2k.github.io/tags/Send-Email/"}]},{"title":"엑셀가공하여 자동 이메일 발송하기","slug":"defect-auto-emailer","date":"2018-03-27T15:17:42.000Z","updated":"2018-04-01T12:54:10.489Z","comments":true,"path":"2018/03/28/defect-auto-emailer/","link":"","permalink":"http://philm2k.github.io/2018/03/28/defect-auto-emailer/","excerpt":"","text":"ㅋㅋㅋ 오늘은 제가 하는 일에 pandas와 python을 접목시켜 직원들을 괴롭히는(?) 자동화 프로그램을 하나 작성했습니다. 프로그램 개요 테스트관리도구에서 selenium을 이용해서 결함내역을 scrapping pandas의 read_excel로 읽어들여서 필요한 파일만 dataframe에 저장 PC의 outlook을 실행 2번에서 생성한 DataFrame을 Filtering해서 각 담당자들에게 자신에게 할당된 해결되지 않은 결함을 자동으로 메일 발송 소스코드는 아래에 곧 공개하겠습니다. ^^ 1. selenium을 이용해서 web scrapping2. pd.read_excel로 필요한 column만 DataFrame에 Load3. PC의 outlook 실행outlook으로 이메일 보내기 참고Python How-To(C) 4. 2번에서 생성한 DataFrame을 가공해서 각 담당자에게 자동 이메일 발송Related Postsㅗㄷㅌ","categories":[{"name":"Data Science","slug":"Data-Science","permalink":"http://philm2k.github.io/categories/Data-Science/"},{"name":"Pandas","slug":"Data-Science/Pandas","permalink":"http://philm2k.github.io/categories/Data-Science/Pandas/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://philm2k.github.io/tags/Excel/"},{"name":"Outlook","slug":"Outlook","permalink":"http://philm2k.github.io/tags/Outlook/"},{"name":"Automation","slug":"Automation","permalink":"http://philm2k.github.io/tags/Automation/"}]},{"title":"Python How-To(D)","slug":"python-how-to-D","date":"2018-03-21T15:00:58.000Z","updated":"2018-04-01T12:54:10.491Z","comments":true,"path":"2018/03/22/python-how-to-D/","link":"","permalink":"http://philm2k.github.io/2018/03/22/python-how-to-D/","excerpt":"","text":"Ddecorator함수를 인자로 받아서 추가적인 작업을 함수 전/후에 해서 인자로 받은 함수를 포함한 결과를 return하는 함수12345678from functools import wrapsdef decorater_function(func): @wraps def inside_deco_function(): print(\"Do something befor func()\") func() print(\"Do something after func()\") return inside_deco_function 목적은 이미 만들어져 있는 기존의 함수를 수정하지 않고도 래퍼(Wrapper)함수를 이용하여 여러가지 기능을 추가할 수 있기 때문입니다. 예를 들어 인증처리 로그 남기는 기능 추가 등 사용방법은 다음과 같습니다.123@decorator_functiondef add_func(x): return x + x dict.get(…) vs. dict.setdefaultdict.get(key, defaultvalue)첫 번째 인자를 가지고 dict에서 value를 가지고 오는 함수두 번째 인자가 없다면 key에 해당하는 value가 없을 경우 None을 반환, 두 번째 인자를 지정하는 경우 key에 해당하는 value가 없는 경우 defaultvalue를 가져 옴12345&gt;&gt;&gt; aaa = &#123;'name':'hong', 'phone':'01012345678', 'birth':'0323'&#125;&gt;&gt;&gt; a.get('name')'hong'&gt;&gt;&gt; a.get('phone')'01012345678' dict.setefault검색키가 존재하면 해당 키에 대한 값을 가져 오고, 존재하지 않으면 기본값으로 해당 키를 생성한 후 기본값을 반환 Duck Typing객체의 클래스나 인터페이스 선언에 상관없이 매서드를 적절히 구현하면 어떠한 객체에도 함수를 호출할 수 있는 다형성(polymorphism)의 한 형태 루시아누 하말류전문가를 위한 파이썬(fluent Python) 부록B 파이선 용어 컴퓨터 프로그래밍 분야에서 덕 타이핑(duck typing)은 동적 타이핑의 한 종류로, 객체의 변수 및 메소드의 집합이 객체의 타입을 결정하는 것을 말한다. 클래스 상속이나 인터페이스 구현으로 타입을 구분하는 대신, 덕 타이핑은 객체가 어떤 타입에 걸맞은 변수와 메소드를 지니면 객체를 해당 타입에 속하는 것으로 간주한다. “덕 타이핑”이라는 용어는 다음과 같이 표현될 수 있는 덕 테스트에서 유래했다. (덕은 영어로 오리를 의미한다.) 위키백과Duck Typing 만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라고 부를 것이다. Related Posts","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"H2","slug":"H2","permalink":"http://philm2k.github.io/tags/H2/"},{"name":"D","slug":"D","permalink":"http://philm2k.github.io/tags/D/"}]},{"title":"파이썬 How-To","slug":"python-how-to","date":"2018-03-20T15:53:15.000Z","updated":"2018-04-01T12:54:10.494Z","comments":true,"path":"2018/03/21/python-how-to/","link":"","permalink":"http://philm2k.github.io/2018/03/21/python-how-to/","excerpt":"","text":"ABEenumerateFFirst Class Function(일급함수)GHHigher Order Function(고위함수)IJKLMNOPQRSseleniumTUVWXYyield, yield fromZzipRelated Posts Python How-To(C) Python How-To(D)","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"H2","slug":"H2","permalink":"http://philm2k.github.io/tags/H2/"}]},{"title":"jupyter file을 hexo blog에서 보기(작성중)","slug":"pandas-with-jupyter","date":"2018-03-18T10:01:57.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/03/18/pandas-with-jupyter/","link":"","permalink":"http://philm2k.github.io/2018/03/18/pandas-with-jupyter/","excerpt":"","text":"참고 싸이트 https://www.npmjs.com/package/hexo-jupyter-notebook https://hexo.io/ko/docs/asset-folders.html Related Posts","categories":[{"name":"Tips & Refs","slug":"Tips-Refs","permalink":"http://philm2k.github.io/categories/Tips-Refs/"},{"name":"Tips","slug":"Tips-Refs/Tips","permalink":"http://philm2k.github.io/categories/Tips-Refs/Tips/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://philm2k.github.io/tags/hexo/"},{"name":"jupyter notebook","slug":"jupyter-notebook","permalink":"http://philm2k.github.io/tags/jupyter-notebook/"}]},{"title":"Hexo블로그 관리:두개의 Repositories로 배포와 운영을 관리하기(Window) - 다소 불완전하지만...","slug":"hexo-with-two-repos","date":"2018-03-18T04:17:04.000Z","updated":"2018-03-20T14:48:22.305Z","comments":true,"path":"2018/03/18/hexo-with-two-repos/","link":"","permalink":"http://philm2k.github.io/2018/03/18/hexo-with-two-repos/","excerpt":"","text":"고민의 시작Hexo로 github에 blog를 만든 것 까지는 좋았습니다. 그런데 형편에 따라 오늘은 집에 있는 PC에서 블로그 글을 작성하다가, 내일은 상암동에 있는 개발실의 PC에서 작업하고 하는 일이 있었습니다.hexo g -d로 배포하는 경우 “githubid”.github.io repository에는 생성된 정적인 페이지만 배포가 되기 때문에 xxx.md로 작성된 post나 page는 별도의 저장소에 수작업으로 관리하게 되었습니다.이거 해보시면 압니다. 무지 불편하거든요 ^^ 결론은 아래 방법도 완전하지는 않네요… 다른 PC에서 동일하게 하니 오류가 있었습니다.결국 hueman의 _config.yml이 받아지지 않았더군요… 다른 곳에 두었던 것을 복사해 주니 해결은 됐는데… 찝찝합니다. 절차는 다음과 같습니다. 블로그 소스를 저장할 repository를 만든다. 저의 경우는 hexo-blog-src로 했습니다. github page를 배포할 reoository를 만든다. “githubid”.github.io로 하는 것은 아시죠? ^^ 1번에서 만든 repository를 local에 clone한다.(GitHub Desktop을 사용하시면 나름 편리합니다.)4, 5번은 다음을 참고하시기 바랍니다.Hexo로 블로그를 시작했습니다. 다른 분들의 링크는 다소 내용이 빠져있어서 좀 헷갈렸는데, 이 포스트는 한 방에 잘 되더군요. 참 쉽네요 ^^ Eric Han워드프레스보다 쉬운 Hexo 블로그 시작하기 local에 clone된 곳(예를 들어 c:\\hexo-blog-src)으로 가서 hexo 블로그를 만든다. 예를 들면…123c:\\hexo-blog-src\\hexo initc:\\hexo-blog-src\\npm instal hexo-cli... 등등 hexo 배포를 위한 git 설정을 합니다. 그리고 themes를 git clone 명령을 이용하신 경우 해당 theme 폴더에 가 보시면 .git 폴더를 삭제하여 일반폴더로 만들어 주셔야 합니다. theme을 여러개 사용하신 경우 theme 폴더마다 들어가서 해주셔야 합니다.1234c:\\hexo-blog-src\\cd themesc:\\hexo-blog-src\\themes\\cd hueman (예를 들어 hueman theme을 쓰신 경우)c:\\hexo-blog-src\\themes\\hueman\\del .git... 등등 마지막으로 hexo d를 이용해 배포를 하시는 경우 .deploy_git 폴더가 생성되는데 이 것을 .gitignore에 추가해 주셔야 합니다. 제일 상단에 추가해 주세요 ^^.gitignore12345.deploy_git/ &lt;== 요기처럼 ^^# Logslogs*.log... 소스관리와 배포관리 소스는 다음의 명령으로 git push123c:\\hexo-blog-src\\git add .c:\\hexo-blog-src\\git commit -m &quot;commit message&quot;c:\\hexo-blog-src\\git push origin master 페이지 배포는 hexo g -d로 해결 특이사항포스트를 작성하고 배포하기 전에 소스 repository에 commit만 하고 sync를 하지 않은 상태에서는 hexo d가 알수 없는 오류가 납니다. 그러니, 블로그에 배포가 끝난 후에 commit하고 sync하는 것이 좋을 것 같습니다. Related Posts","categories":[{"name":"Tips & Refs","slug":"Tips-Refs","permalink":"http://philm2k.github.io/categories/Tips-Refs/"},{"name":"Tips","slug":"Tips-Refs/Tips","permalink":"http://philm2k.github.io/categories/Tips-Refs/Tips/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://philm2k.github.io/tags/hexo/"}]},{"title":"generator","slug":"generator","date":"2018-03-11T15:26:34.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/03/12/generator/","link":"","permalink":"http://philm2k.github.io/2018/03/12/generator/","excerpt":"","text":"Python Cookbook 4.14방대한 양의 로그 파일이 들어 있는 디렉터리에서 작업123456789101112131415161718192021222324252627282930313233343536373839404142434445import osimport fnmatchimport gzipimport bz2import redef gen_find(filepat, top): ''' 디렉터리 트리에서 와일드카드 패턴에 매칭하는 모든 파일 이름을 찾는다. ''' for path, dirlist, filelist in os.walk(top): for name in fnmatch.filter(filelist, filepat): yield os.path.join(path, name)def gen_opener(filenames): ''' 파일 이름 시퀀스를 하나씩 열어 파일 객체를 생성한다. 다음 순환으로 넘어가는 파일을 닫는다. ''' for filename in filenames: if filename.endswith('.gz'): f = gzip.open(filename, 'rt') elif filename.endswith('.bz2'): f = bz2.open(filename, 'rt') else: f = open(filename, 'rt') yield f f.close()def gen_concatenate(iterators): ''' 이터레이터 시퀀스를 합쳐 하나의 시퀀스를 만든다. ''' for it in iterators: yield from itdef gen_grep(pattern, lines): ''' 라인 시퀀스에서 정규식 패턴을 살펴본다. ''' pat = re.compile(pattern) for line in lines: if pat.search(line): yield line 로그 분석(?)이제 이 함수들을 이용해 python이란 단어를 포함하고 있는 모든 로그 라인을 찾으려면 다음과 같이 한다. 123456lognames = gen_find('access-log*', 'www')files = gen_opener(lognames)lines = gen_concatenate(files)pylines = gen_grep('(?i)python', lines)for line in pylines: print(line) 또는 제너레이터 표현식을 써서 다음과 같이 확장할 수 있다.1234567lognames = gen_find('access-log*', 'www')files = gen_opener(lognames)lines = gen_concatenate(files)pylines = gen_grep('(?i)python', lines)bytecolumn = (line.rsplit(None, 1)[1] for line in pylines)bytes = (int(x) for x in bytecolumn if x != '-')print('Total', sum(bytes)) Related Posts","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"generator","slug":"generator","permalink":"http://philm2k.github.io/tags/generator/"},{"name":"yield","slug":"yield","permalink":"http://philm2k.github.io/tags/yield/"},{"name":"yield from","slug":"yield-from","permalink":"http://philm2k.github.io/tags/yield-from/"}]},{"title":"정규표현식 기본","slug":"regex-ref","date":"2018-03-11T14:29:16.000Z","updated":"2018-03-18T13:21:21.846Z","comments":true,"path":"2018/03/11/regex-ref/","link":"","permalink":"http://philm2k.github.io/2018/03/11/regex-ref/","excerpt":"","text":"정규표현식에 대한 기본정규표현식을 접한 지는 꽤 오래되었지만 역시 실전에서 사용하지 않고 눈에 익히기 어려워서 자꾸 잊어먹고 아직 마스터도 못하고 있었습니다. ^^ 문자클래스 기호 클래스 의미 \\d 0에서 9까지의 임의의 숫자 글자 \\D \\d에 해당되지 않는 모든 글자 \\w 문자, 숫자 글자 또는 밑줄 글자 \\W \\w에 해당되지 않는 모든 글자 \\s 빈칸, 탭 또는 줄바꿈 문자 \\S \\s에 해당되지 않는 모든 글자 대괄호([ ])를 사용한 사용자 정의 문자 클래스 기호 클래스 의미 - 범위를 지정 예) [0-5]: 0~5 사이이 숫자 글자 ^ 범위가 아닌 것의 의미 예)[^aeiouAEIOU]: 대문자든 소문자든 모음이 아닌 글자 대괄호 안에서는 escape문자를 쓸 필요가 없음 시작과 끝 기호 클래스 의미 ^ 시작부분에서 일치하는 문자열이 나와야 함 예) ^Hi: Hi로 시작하는 문자열 $ 끝나는 부분에 일치하는 문자열이 나와야 함 예) \\d$: 끝이 0~9 사이의 숫자 글자 Related Posts","categories":[{"name":"Tips & Refs","slug":"Tips-Refs","permalink":"http://philm2k.github.io/categories/Tips-Refs/"},{"name":"Refs","slug":"Tips-Refs/Refs","permalink":"http://philm2k.github.io/categories/Tips-Refs/Refs/"}],"tags":[{"name":"Regular Expressions","slug":"Regular-Expressions","permalink":"http://philm2k.github.io/tags/Regular-Expressions/"}]},{"title":"datetime","slug":"datetime","date":"2018-03-01T12:59:26.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/03/01/datetime/","link":"","permalink":"http://philm2k.github.io/2018/03/01/datetime/","excerpt":"","text":"다양한 형태의 날짜 정보 가져오기아래 세가지 형태의 날짜 형태만 가져오면 문제가 없더군요.. ^^1234from datatime import datetimedt0 = datetime.now().strftime('%y%m%d') # 180301dt1 = datetime.now().strftime('%Y%m%d') # 20180301dt2 = datetime.now().strftime('%Y%m%d-%H%M') # 20180301-22:04 Related Posts","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"datetime","slug":"datetime","permalink":"http://philm2k.github.io/tags/datetime/"}]},{"title":"Pandas로 엑셀파일 다루기","slug":"pandas","date":"2018-02-26T15:53:10.000Z","updated":"2018-03-21T15:39:29.701Z","comments":true,"path":"2018/02/27/pandas/","link":"","permalink":"http://philm2k.github.io/2018/02/27/pandas/","excerpt":"","text":"기업체나 학교에서도 거의 모든 사람들이 쓰는 소프트웨어가 Excel입니다. 간단한 통계나 보고서용 표 정리를 위해 엑셀의 계산 기능을 많이 들 사용합니다.pandas를 이용하시면 다양하게 Excel의 데이터를 가공하고 다시 Excel로 저장이 가능합니다. 다음은 IMDB에서 제공하는 movie data excel 파일입니다. 여기(https://www.dataquest.io/blog/large_files/movies.xls) 에서 다운로드 하실 수 있습니다. Excel 읽어서 DataFrame에 넣기12345678import pandas as npBASE_PATH = \"d:/dev\"FILE_NAME = \"abc.xlsx\"from os.path import joindf = pd.read_excel(join(BASE_PATH, FILE_NAME))df.head() header=2엑셀을 읽어들이다 보면 첫 번째 행이 header가 아닌 경우가 있습니다. 이 때 사용하는 option입니다. header=2의 의미는 3번째 행이 데이터의 header라는 의미입니다. 위의 코드를 고쳐보면 다음과 같습니다.12345678import pandas as npBASE_PATH = \"d:/dev\"FILE_NAME = \"abc.xlsx\"from os.path import joindf = pd.read_excel(join(BASE_PATH, FILE_NAME),header=2)df.head() sheetname=NoneExcel파일의 sheet가 여러 개인 경우 sheetname=None을 주고 read_excel을 실행시키면 엑셀파일 내의 모든 sheet를 읽어서 DataFrame으로 이루어진 Dict 객체를 반환합니다. 코드들 고쳐보겠습니다.12345678import pandas as npBASE_PATH = \"d:/dev\"FILE_NAME = \"abc.xlsx\"from os.path import joindf = pd.read_excel(join(BASE_PATH, FILE_NAME), sheetname=None)df.head() Related Posts10분 만에 익히는 pandas 기본 pandas 0.22.0 documentation10 Minutes to pandas IMDB에서 제공하는 Excel로 pandas로 엑셀을 다루는 주요 Technique과 잘 설명하고 있습니다. Harish GargUsing Excel with pandas","categories":[{"name":"Data Science","slug":"Data-Science","permalink":"http://philm2k.github.io/categories/Data-Science/"},{"name":"Pandas","slug":"Data-Science/Pandas","permalink":"http://philm2k.github.io/categories/Data-Science/Pandas/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"http://philm2k.github.io/tags/Excel/"},{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/tags/Python/"}]},{"title":"Python 정규표현식 기본","slug":"regex","date":"2018-02-25T14:49:54.000Z","updated":"2018-03-18T13:21:21.846Z","comments":true,"path":"2018/02/25/regex/","link":"","permalink":"http://philm2k.github.io/2018/02/25/regex/","excerpt":"","text":"정규표현식을 이용하여 요즘 하고 있는 일12345import reicRegex = re.compile(r'BOCOM\\d\\d\\d\\d\\d')txt = \"This is 책임자승인(BOCOM00001)!!! That is 책임자승인(BOCOM00201)!!!\"mo = icRegex.search(txt)print(mo.group()) 이 코드를 실행하면 결과는 “BOCOM00001”입니다. txt의 문장과 같은 코드가 들어 있는 약 20,000개의 파일을 하나씩 열어서 정규표현식으로 찾고 pandas를 이용하여 Excel로 저장하는데 10분이 채 안 걸립니다. ^^ 위의 내용을 잘 보시면 다음의 단계를 거친 것을 알 수 있습니다. Python의 정규표현식 사용의 단계 import re로 정규식 모듈을 가져온다. re.compile() 함수로 Regex 개체를 만든다. 검색할 문자열을 Regex 개체의 search() 메소드로 전달하여 Match 객체를 돌려받는다. Match 개체의 group()메소드를 호출해서 실제 일치하는 텍스트 문자열을 돌려받는다. search() vs. findall() search()는 검색하는 문자열에서 처음으로 나타나는 일치하는 텍스트의 Match 개체를 return findall() 메소드는 검색 문자열에서 일치하는 모든 문자열을 return 다시 말해서 위의 코드에서 search() 대신 findall()을 사용할 경우의 답은 [‘BOCOM00001’, ‘BOCOM00201’]입니다.코드는 약간 다릅니다. 맞게 써보면 다음과 같습니다.1234import reicRegex = re.compile(r'BOCOM\\d\\d\\d\\d\\d')txt = \"This is 책임자승인(BOCOM00001)!!! That is 책임자승인(BOCOM00201)!!!\"print(icRegex.findall(txt)) Related PostsDave Child의 정규표현식에 대한 요약 자료입니다. Dave ChildRegular Expression Cheatsheet","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"Regular Expressions","slug":"Regular-Expressions","permalink":"http://philm2k.github.io/tags/Regular-Expressions/"}]},{"title":"Hello World(자동생성)","slug":"hello-world","date":"2018-02-20T13:45:41.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/20/hello-world/","link":"","permalink":"http://philm2k.github.io/2018/02/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 퀵 스타트새로운 포스트를 생성1$ hexo new \"My New Post\" More info: Writing 서버 실행1$ hexo server More info: Server 정정파일 생성1$ hexo generate More info: Generating 원격싸이트에 배포1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"NumPy","slug":"numpy","date":"2018-02-18T14:10:15.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/18/numpy/","link":"","permalink":"http://philm2k.github.io/2018/02/18/numpy/","excerpt":"","text":"NumPy 기본이 뭐지NumPy 솔직히 공부를 하기는 하는데…. 요즘 Pandas에 푹 바쪄서 NumPy는 왜 공부하는지 모르겠다능 ^^ ㅋㅋㅋ 1import numpy as np Related Posts","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://philm2k.github.io/categories/Machine-Learning/"},{"name":"Numpy","slug":"Machine-Learning/Numpy","permalink":"http://philm2k.github.io/categories/Machine-Learning/Numpy/"}],"tags":[{"name":"basic","slug":"basic","permalink":"http://philm2k.github.io/tags/basic/"},{"name":"NumPy","slug":"NumPy","permalink":"http://philm2k.github.io/tags/NumPy/"}]},{"title":"big-data","slug":"big-data","date":"2018-02-17T13:45:41.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/17/big-data/","link":"","permalink":"http://philm2k.github.io/2018/02/17/big-data/","excerpt":"","text":"Big Data란? Related Posts","categories":[{"name":"Data Science","slug":"Data-Science","permalink":"http://philm2k.github.io/categories/Data-Science/"}],"tags":[{"name":"Big Data","slug":"Big-Data","permalink":"http://philm2k.github.io/tags/Big-Data/"}]},{"title":"machine-learning","slug":"machine-learning","date":"2018-02-17T13:45:32.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/17/machine-learning/","link":"","permalink":"http://philm2k.github.io/2018/02/17/machine-learning/","excerpt":"","text":"Machine Learning이란? Related Posts","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://philm2k.github.io/categories/Machine-Learning/"}],"tags":[{"name":"machine learning","slug":"machine-learning","permalink":"http://philm2k.github.io/tags/machine-learning/"}]},{"title":"keras","slug":"keras","date":"2018-02-17T13:43:40.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/17/keras/","link":"","permalink":"http://philm2k.github.io/2018/02/17/keras/","excerpt":"","text":"keras처음 접하고 책도 샀습니다. 정리가 잘 되어 있습니다. 김태형김태형's keras 블로그 할 것도 많고 배울 것도 많습니다. ^^ Related Posts","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://philm2k.github.io/categories/Machine-Learning/"},{"name":"Keras","slug":"Machine-Learning/Keras","permalink":"http://philm2k.github.io/categories/Machine-Learning/Keras/"}],"tags":[{"name":"keras","slug":"keras","permalink":"http://philm2k.github.io/tags/keras/"}]},{"title":"About Hexo","slug":"About-Hexo","date":"2018-02-17T10:20:15.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/17/About-Hexo/","link":"","permalink":"http://philm2k.github.io/2018/02/17/About-Hexo/","excerpt":"","text":"우선 hexo의 한글 도움말 싸이트가 있습니다.Hexo 공식 페이지의 한글 버전입니다. HEXO빠르고 간단하고 강력한 블로그 프레임워크 주로 futurecreator Eric Han님의 github 페이지의 내용입니다. ^^ Hexo로 블로그를 시작했습니다. 다른 분들의 링크는 다소 내용이 빠져있어서 좀 헷갈렸는데, 이 포스트는 한 방에 잘 되더군요. 참 쉽네요 ^^ Eric Han워드프레스보다 쉬운 Hexo 블로그 시작하기 블로그를 꾸미는 hexo의 플러그인에 대해 설명하고 있습니다. 간결하고 눈에 쏙쏙들어옵니다. ^^ Eric HanHexo 태그 플러그인 (Tag plugins) 살펴보기 Related Posts","categories":[{"name":"Tips & Refs","slug":"Tips-Refs","permalink":"http://philm2k.github.io/categories/Tips-Refs/"},{"name":"Tips","slug":"Tips-Refs/Tips","permalink":"http://philm2k.github.io/categories/Tips-Refs/Tips/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://philm2k.github.io/tags/hexo/"}]},{"title":"Python","slug":"python","date":"2018-02-17T09:56:58.000Z","updated":"2018-03-18T13:21:21.846Z","comments":true,"path":"2018/02/17/python/","link":"","permalink":"http://philm2k.github.io/2018/02/17/python/","excerpt":"","text":"2017년 3월부터 Python을 본격적으로 접하게 되었습니다. 회사에서 DT 열풍이 불고 Big Data 열풍이 부는데 빠지는 않는 것이 Python 이라는 언어이더군요. 매우 간결하고 마치 수학공식같은 언어라고 생각됩니다.처음에는 Python의 기본 문법과 원리를 익히기 위해 시간을 보냈습니다. Head First Python Introducing Python Fluent Python Python Cookbook등을 학습하였습니다. 다음에는 Maching Learning이나 Big Data와 연관되는 NumPy, Pandas 등을 학습하였습니다. 2018년 2월 현재 금융권 차세대 프로젝트를 진행중이며, 사업관리자의 역할을 하고 있습니다.보통 관리도구로 부터 자료를 다운로드 받아, 이를 Excel로 가공(개인별, 팀별 계획과 실적을 관리할 수 있도록)한 이후 개인별로 밀착관리하는 것이 주 업무입니다. 이행이나 통합테스트 같은 커다란 이벤트가 진행되는 경우 그 계획을 수립하기도 합니다. 그런데…. 이번에는 기왕에 배운 Python을 활용하고 있습니다. 관리도구에서 내용을 Download 받을 때는 selenium 또는 BeautifulSoup을 활용하여 자동으로 scrapping하고 Pandas와 NumPy(주로 Pandas)를 활용하여 데이터를 가공하고 이를 Excel로 저장합니다. 결과를 Outlook API를 활용하여 자동으로 개인별로 메일을 보냅니다.(70% 정도 완성됨) 앞으로 제가 지금 하고 있는 Python Study가 어떤 방향으로 확장될 지 아직은 잘 모르겠습니다….. 스스로도 기대되는 부분이 있습니다. Related PostsPython 3.6.4의 공식문서입니다. Python Software FoundationPython 3.6.4 문서 Python 및 관련 패키지가 포함되어 있는 안정적인 배포판입니다. 한 번 써보시면 압니다. ^^ Anaconda,IncAnaconda Doownload 페이지","categories":[{"name":"Python","slug":"Python","permalink":"http://philm2k.github.io/categories/Python/"}],"tags":[{"name":"thebeginning","slug":"thebeginning","permalink":"http://philm2k.github.io/tags/thebeginning/"}]},{"title":"2018-02-17","slug":"2018-02-17","date":"2018-02-17T08:59:49.000Z","updated":"2018-03-18T13:21:21.830Z","comments":true,"path":"2018/02/17/2018-02-17/","link":"","permalink":"http://philm2k.github.io/2018/02/17/2018-02-17/","excerpt":"","text":"시작….규칙들 Category 첫 글자는 대문자로 시작 tag 첫 글자 소문자로 시작","categories":[],"tags":[]}]}