<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>趣開者</title>
  
  <subtitle>For the enjoyable future...</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://philm2k.github.io/"/>
  <updated>2018-04-21T06:56:37.137Z</updated>
  <id>http://philm2k.github.io/</id>
  
  <author>
    <name>Phil Im</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>effective python 파이썬 코딩의 기술[책]</title>
    <link href="http://philm2k.github.io/2018/04/14/effective-python/"/>
    <id>http://philm2k.github.io/2018/04/14/effective-python/</id>
    <published>2018-04-14T12:56:37.000Z</published>
    <updated>2018-04-21T06:56:37.137Z</updated>
    
    <content type="html"><![CDATA[<p>이 책을 보는 중입니다. 생각할 것이 많더군요<br>다음은 목차입니다.</p><h1 id="1장-▶-파이썬다운-생각-015"><a href="#1장-▶-파이썬다운-생각-015" class="headerlink" title="1장 ▶ 파이썬다운 생각 015"></a>1장 ▶ 파이썬다운 생각 015</h1><ul><li>Better way 1 사용 중인 파이썬의 버전을 알자 016 </li><li>Better way 2 PEP 8 스타일 가이드를 따르자 017 </li><li>Better way 3 bytes, str, unicode의 차이점을 알자 020 </li><li>Better way 4 복잡한 표현식 대신 헬퍼 함수를 작성하자 024 </li><li>Better way 5 시퀀스를 슬라이스하는 방법을 알자 028 </li><li>Better way 6 한 슬라이스에 start, end, stride를 함께 쓰지 말자 032 </li><li>Better way 7 map과 filter 대신 리스트 컴프리헨션을 사용하자 034 </li><li>Better way 8 리스트 컴프리헨션에서 표현식을 두 개 넘게 쓰지 말자 036 </li><li>Better way 9 컴프리헨션이 클 때는 제너레이터 표현식을 고려하자 039 </li><li>Better way 10 range보다는 enumerate를 사용하자 041 </li><li>Better way 11 이터레이터를 병렬로 처리하려면 zip을 사용하자 043 </li><li>Better way 12 for와 while 루프 뒤에는 else 블록을 쓰지 말자 046 </li><li>Better way 13 try/except/else/finally에서 각 블록의 장점을 이용하자 049 <ul><li>finally 블록 050 </li><li>else 블록 050 </li><li>모두 함께 사용하기 051 </li></ul></li></ul><h1 id="2장-▶-함수-053"><a href="#2장-▶-함수-053" class="headerlink" title="2장 ▶ 함수 053"></a>2장 ▶ 함수 053</h1><ul><li>Better way 14 None을 반환하기보다는 예외를 일으키자 054 </li><li>Better way 15 클로저가 변수 스코프와 상호 작용하는 방법을 알자 057 <ul><li>데이터 얻어오기 060 </li><li>파이썬 2의 스코프 062 </li></ul></li><li>Better way 16 리스트를 반환하는 대신 제너레이터를 고려하자 063 </li><li>Better way 17 인수를 순회할 때는 방어적으로 하자 066 </li><li>Better way 18 가변 위치 인수로 깔끔하게 보이게 하자 072 </li><li>Better way 19 키워드 인수로 선택적인 동작을 제공하자 075 </li><li>Better way 20 동적 기본 인수를 지정하려면 None과 docstring을 사용하자 079 </li><li>Better way 21 키워드 전용 인수로 명료성을 강요하자 083 <ul><li>파이썬 2의 키워드 전용 인수 086 </li></ul></li></ul><h1 id="3장-▶-클래스와-상속-089"><a href="#3장-▶-클래스와-상속-089" class="headerlink" title="3장 ▶ 클래스와 상속 089"></a>3장 ▶ 클래스와 상속 089</h1><ul><li>Better way 22 딕셔너리와 튜플보다는 헬퍼 클래스로 관리하자 090 <ul><li>클래스 리팩토링 093 </li></ul></li><li>Better way 23 인터페이스가 간단하면 클래스 대신 함수를 받자 097 </li><li>Better way 24 객체를 범용으로 생성하려면 @classmethod 다형성을 이용하자 102 </li><li>Better way 25 super로 부모 클래스를 초기화하자 108 </li><li>Better way 26 믹스인 유틸리티 클래스에만 다중 상속을 사용하자 114 </li><li>Better way 27 공개 속성보다는 비공개 속성을 사용하자 119 </li><li>Better way 28 커스텀 컨테이너 타입은 collections.abc의 클래스를 상속받게 만들자 126 </li></ul><h1 id="4장-▶-메타클래스와-속성-133"><a href="#4장-▶-메타클래스와-속성-133" class="headerlink" title="4장 ▶ 메타클래스와 속성 133"></a>4장 ▶ 메타클래스와 속성 133</h1><ul><li>Better way 29 게터와 세터 메서드 대신에 일반 속성을 사용하자 134 </li><li>Better way 30 속성을 리팩토링하는 대신 @property를 고려하자 139 </li><li>Better way 31 재사용 가능한 @property 메서드에는 디스크립터를 사용하자 144 </li><li>Better way 32 지연 속성에는 _ <em>getattr</em> _, _ <em>getattribute</em> _, _ <em>setattr</em> _을 사용하자 151 </li><li>Better way 33 메타클래스로 서브클래스를 검증하자 158 </li><li>Better way 34 메타클래스로 클래스의 존재를 등록하자 161 </li><li>Better way 35 메타클래스로 클래스 속성에 주석을 달자 167 </li></ul><h1 id="5장-▶-병행성과-병렬성-171"><a href="#5장-▶-병행성과-병렬성-171" class="headerlink" title="5장 ▶ 병행성과 병렬성 171"></a>5장 ▶ 병행성과 병렬성 171</h1><ul><li>Better way 36 자식 프로세스를 관리하려면 subprocess를 사용하자 172 </li><li>Better way 37 스레드를 블로킹 I/O용으로 사용하고 병렬화용으로는 사용하지 말자 178 </li><li>Better way 38 스레드에서 데이터 경쟁을 막으려면 Lock을 사용하자 183 </li><li>Better way 39 스레드 간의 작업을 조율하려면 Queue를 사용하자 188 <ul><li>Queue로 문제 해결하기 192 </li></ul></li><li>Better way 40 많은 함수를 동시에 실행하려면 코루틴을 고려하자 197<ul><li>생명 게임 200 </li><li>파이썬 2의 코루틴 207 </li></ul></li><li>Better way 41 진정한 병렬성을 실현하려면 concurrent.futures를 고려하자 209 </li></ul><h1 id="6장-▶-내장-모듈-215"><a href="#6장-▶-내장-모듈-215" class="headerlink" title="6장 ▶ 내장 모듈 215"></a>6장 ▶ 내장 모듈 215</h1><ul><li>Better way 42 functools.wraps로 함수 데코레이터를 정의하자 216 </li><li>Better way 43 재사용 가능한 try/finally 동작을 만들려면 contextlib와 with 문을 고려하자 219 <ul><li>with 타깃 사용하기 221 </li></ul></li><li>Better way 44 copyreg로 pickle을 신뢰할 수 있게 만들자 223 <ul><li>기본 속성 값 226 </li><li>클래스 버전 관리 228 </li><li>안정적인 임포트 경로 229 </li></ul></li><li>Better way 45 지역 시간은 time이 아닌 datetime으로 표현하자 231 <ul><li>time 모듈 232 </li><li>datetime 모듈 234</li></ul></li><li>Better way 46 내장 알고리즘과 자료 구조를 사용하자 237 <ul><li>더블 엔디드 큐 237 </li><li>정렬된 딕셔너리 238 </li><li>기본 딕셔너리 239 </li><li>힙 큐 240 </li><li>바이섹션 241 </li><li>이터레이터 도구 242 </li></ul></li><li>Better way 47 정밀도가 중요할 때는 decimal을 사용하자 243 </li><li>Better way 48 커뮤니티에서 만든 모듈을 어디서 찾아야 하는지 알아두자 247 </li></ul><h1 id="7장-▶-협력-249"><a href="#7장-▶-협력-249" class="headerlink" title="7장 ▶ 협력 249"></a>7장 ▶ 협력 249</h1><ul><li>Better way 49 모든 함수, 클래스, 모듈에 docstring을 작성하자 250 <ul><li>모듈 문서화 251 </li><li>클래스 문서화 252 </li><li>함수 문서화 253 </li></ul></li><li>Better way 50 모듈을 구성하고 안정적인 API를 제공하려면 패키지를 사용하자 255 <ul><li>네임스페이스 256 </li><li>안정적인 API 258 </li></ul></li><li>Better way 51 루트 Exception을 정의해서 API로부터 호출자를 보호하자 262 </li><li>Better way 52 순환 의존성을 없애는 방법을 알자 266 <ul><li>임포트 재정렬 268 </li><li>임포트, 설정, 실행 269 </li><li>동적 임포트 271 </li></ul></li><li>Better way 53 의존성을 분리하고 재현하려면 가상 환경을 사용하자 273 <ul><li>pyvenv 명령 275 </li><li>의존성 재현 277 </li></ul></li></ul><h1 id="8장-▶-제품화-281"><a href="#8장-▶-제품화-281" class="headerlink" title="8장 ▶ 제품화 281"></a>8장 ▶ 제품화 281</h1><ul><li>Better way 54 배포 환경을 구성하는 데는 모듈 스코프 코드를 고려하자 282 </li><li>Better way 55 디버깅 출력용으로는 repr 문자열을 사용하자 285 </li><li>Better way 56 unittest로 모든 것을 테스트하자 289 </li><li>Better way 57 pdb를 이용한 대화식 디버깅을 고려하자 293 </li><li>Better way 58 최적화하기 전에 프로파일하자 295 </li><li>Better way 59 tracemalloc으로 메모리 사용 현황과 누수를 파악하자 301 </li></ul><h1 id="찾아보기-305"><a href="#찾아보기-305" class="headerlink" title="찾아보기 305"></a>찾아보기 305</h1><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이 책을 보는 중입니다. 생각할 것이 많더군요&lt;br&gt;다음은 목차입니다.&lt;/p&gt;
&lt;h1 id=&quot;1장-▶-파이썬다운-생각-015&quot;&gt;&lt;a href=&quot;#1장-▶-파이썬다운-생각-015&quot; class=&quot;headerlink&quot; title=&quot;1장 ▶ 파이썬다운 
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
      <category term="books" scheme="http://philm2k.github.io/categories/Python/books/"/>
    
    
      <category term="effective" scheme="http://philm2k.github.io/tags/effective/"/>
    
  </entry>
  
  <entry>
    <title>python-how-to(S)</title>
    <link href="http://philm2k.github.io/2018/04/09/python-how-to-S/"/>
    <id>http://philm2k.github.io/2018/04/09/python-how-to-S/</id>
    <published>2018-04-09T04:54:35.000Z</published>
    <updated>2018-04-21T06:56:37.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><h2 id="sequence-자료형"><a href="#sequence-자료형" class="headerlink" title="sequence 자료형"></a>sequence 자료형</h2><p>여러 원자로(숫자형은 하나의 원자로 이루어져 있다.) 구성된 자료형을 시퀀스(Sequence) 자료형이라고 부른다.</p><h3 id="1-sequence-종류"><a href="#1-sequence-종류" class="headerlink" title="1. sequence 종류"></a>1. sequence 종류</h3><ul><li><p>컨테이너 시퀀스(container sequence): 서로 다른 자료형의 항목들을 담을 수 있음</p><ul><li>리스트: Mutable</li><li>튜플: Immutable</li><li>collections.deque: Mutable</li></ul></li><li><p>균일 시퀀스(flat sequence): 단 하나의 자료형만 담을 수 있음</p><ul><li>str: Immutable</li><li>bytes: Immutable</li><li>bytearray: Mutable</li><li>memoryview: Mutable</li><li>array.array: Mutable</li></ul></li></ul><h3 id="2-sequence의-특징"><a href="#2-sequence의-특징" class="headerlink" title="2. sequence의 특징"></a>2. sequence의 특징</h3><ul><li>동일한 타입의 원소를 가질 수도 있고 리스트처럼 객체를 원소로 가질 수도 있다.</li><li>Mutable과 Immutable이 있다.</li><li>순서가 있으므로 인섹스를 이용하여 검색이 가능하고 슬라이스로 부분도 검색이 가능하다.</li></ul><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li>Set 자료형</li><li>원소들을 검색할 때 index가 아닌 key로 접근해서 처리</li><li>키는 유일해야 함</li><li>따라서 key를 생성할 때 hash 알고리즘을 통해 유일한 값만 구성</li></ul><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;S&quot;&gt;&lt;a href=&quot;#S&quot; class=&quot;headerlink&quot; title=&quot;S&quot;&gt;&lt;/a&gt;S&lt;/h1&gt;&lt;h2 id=&quot;selenium&quot;&gt;&lt;a href=&quot;#selenium&quot; class=&quot;headerlink&quot; title=&quot;selenium&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
      <category term="용어" scheme="http://philm2k.github.io/categories/Python/%EC%9A%A9%EC%96%B4/"/>
    
    
      <category term="H2" scheme="http://philm2k.github.io/tags/H2/"/>
    
      <category term="S" scheme="http://philm2k.github.io/tags/S/"/>
    
  </entry>
  
  <entry>
    <title>Python bool에 관한 정리</title>
    <link href="http://philm2k.github.io/2018/04/09/python-bool/"/>
    <id>http://philm2k.github.io/2018/04/09/python-bool/</id>
    <published>2018-04-09T03:36:21.000Z</published>
    <updated>2018-04-21T06:56:37.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파이선-bool이-False인-경우들"><a href="#파이선-bool이-False인-경우들" class="headerlink" title="파이선 bool이 False인 경우들"></a>파이선 bool이 False인 경우들</h1><p>None, 숫자0, 빈문자열, 빈리스트, 빈 튜플, 빈 사전, set() </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">0.0</span>, <span class="string">""</span>, (),&#123;&#125;,[], set(), <span class="keyword">None</span>]:</span><br><span class="line">    print(str(i), bool(i))</span><br></pre></td></tr></table></figure><pre><code>0 False0.0 False False() False{} False[] Falseset() FalseNone False</code></pre><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;파이선-bool이-False인-경우들&quot;&gt;&lt;a href=&quot;#파이선-bool이-False인-경우들&quot; class=&quot;headerlink&quot; title=&quot;파이선 bool이 False인 경우들&quot;&gt;&lt;/a&gt;파이선 bool이 False인 경우들&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
    
      <category term="bool" scheme="http://philm2k.github.io/tags/bool/"/>
    
  </entry>
  
  <entry>
    <title>파일 다루기(Treat with files, folders, etc)</title>
    <link href="http://philm2k.github.io/2018/03/31/python-with-file/"/>
    <id>http://philm2k.github.io/2018/03/31/python-with-file/</id>
    <published>2018-03-31T08:43:02.000Z</published>
    <updated>2018-04-21T06:56:37.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="가장-최근에-생성된-파일-가져오기"><a href="#가장-최근에-생성된-파일-가져오기" class="headerlink" title="가장 최근에 생성된 파일 가져오기"></a>가장 최근에 생성된 파일 가져오기</h1><h2 id="1-glob-glob을-이용하여-파일목록-가져오기"><a href="#1-glob-glob을-이용하여-파일목록-가져오기" class="headerlink" title="1. glob.glob을 이용하여 파일목록 가져오기"></a>1. glob.glob을 이용하여 파일목록 가져오기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line">pattern = <span class="string">"D:/HobbyDev/02.python Data Analysis/DataScienceHandbook/*.ipynb"</span></span><br><span class="line">lst_files = glob(pattern)</span><br><span class="line">lst_files[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure><pre><code>[&apos;D:/HobbyDev/02.python Data Analysis/DataScienceHandbook\\00.00-Preface.ipynb&apos;, &apos;D:/HobbyDev/02.python Data Analysis/DataScienceHandbook\\01.00-IPython-Beyond-Normal-Python.ipynb&apos;, &apos;D:/HobbyDev/02.python Data Analysis/DataScienceHandbook\\01.01-Help-And-Documentation.ipynb&apos;, &apos;D:/HobbyDev/02.python Data Analysis/DataScienceHandbook\\01.02-Shell-Keyboard-Shortcuts.ipynb&apos;, &apos;D:/HobbyDev/02.python Data Analysis/DataScienceHandbook\\01.03-Magic-Commands.ipynb&apos;]</code></pre><h2 id="2-getctime을-이용하여-가장-최근에-생성된-파일명-찾기"><a href="#2-getctime을-이용하여-가장-최근에-생성된-파일명-찾기" class="headerlink" title="2. getctime을 이용하여 가장 최근에 생성된 파일명 찾기"></a>2. getctime을 이용하여 가장 최근에 생성된 파일명 찾기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> getctime</span><br><span class="line">latest_file = max(lst_files, key=getctime)</span><br><span class="line">latest_file</span><br></pre></td></tr></table></figure><pre><code>&apos;D:/HobbyDev/02.python Data Analysis/DataScienceHandbook\\03.12-Performance-Eval-and-Query.ipynb&apos;</code></pre><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;가장-최근에-생성된-파일-가져오기&quot;&gt;&lt;a href=&quot;#가장-최근에-생성된-파일-가져오기&quot; class=&quot;headerlink&quot; title=&quot;가장 최근에 생성된 파일 가져오기&quot;&gt;&lt;/a&gt;가장 최근에 생성된 파일 가져오기&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
    
      <category term="H2" scheme="http://philm2k.github.io/tags/H2/"/>
    
      <category term="files" scheme="http://philm2k.github.io/tags/files/"/>
    
      <category term="folders" scheme="http://philm2k.github.io/tags/folders/"/>
    
  </entry>
  
  <entry>
    <title>Python How-To(C)</title>
    <link href="http://philm2k.github.io/2018/03/31/python-how-to-C/"/>
    <id>http://philm2k.github.io/2018/03/31/python-how-to-C/</id>
    <published>2018-03-31T08:00:42.000Z</published>
    <updated>2018-04-21T06:56:37.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="Closure-클로저"><a href="#Closure-클로저" class="headerlink" title="Closure(클로저)"></a>Closure(클로저)</h2><blockquote><p>클로저는 함수 본체에서 정의하지 않고 참조하는 비전역(nonglobal) 변수를 포함한 확장 범위를 가진 함수이며 익명 함수일 필요는 없다. 함수 본체 외부에 정의된 비전역 변수에 접근할 수 있다는 것이 중요하다.</p><footer><strong>루시아누 하말류</strong><cite>전문가를 위한 파이썬</cite></footer></blockquote><p>뭔 소린지 감은 잘 안 옵니다. ^^</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C&lt;/h1&gt;&lt;h2 id=&quot;Closure-클로저&quot;&gt;&lt;a href=&quot;#Closure-클로저&quot; class=&quot;headerlink&quot; title=&quot;Closure
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
      <category term="용어" scheme="http://philm2k.github.io/categories/Python/%EC%9A%A9%EC%96%B4/"/>
    
    
      <category term="H2" scheme="http://philm2k.github.io/tags/H2/"/>
    
      <category term="C" scheme="http://philm2k.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>outlook으로 이메일 보내기</title>
    <link href="http://philm2k.github.io/2018/03/29/send-email-with-outlook/"/>
    <id>http://philm2k.github.io/2018/03/29/send-email-with-outlook/</id>
    <published>2018-03-29T14:11:42.000Z</published>
    <updated>2018-04-21T06:56:37.148Z</updated>
    
    <content type="html"><![CDATA[<p>stackoverflow등 인터넷을 뒤지면서 찾은 python으로 email 보내는 소스입니다.<br>pywin을 사용할 수도 있는 것 같은데 아래 소스는 win32를 이용한 방법입니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32com.client <span class="keyword">as</span> win32</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(subject, body, recipients, cc, auto=True)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    이메일 보내는 함수</span></span><br><span class="line"><span class="string">    Auto=True인 경우 바로 메일 발송</span></span><br><span class="line"><span class="string">    Auto=False인 경우 메일 보내기 위한 편지 화면을 Display</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    outlook = wind32.Dispatch(<span class="string">'outlook.application'</span>)</span><br><span class="line">    mail = outlook.CreateItem(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> type(recipients) == list:</span><br><span class="line">        mail.To = <span class="string">";"</span>.join(recipients)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mail.To = recipients</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> type(cc) == list:</span><br><span class="line">        mail.CC = <span class="string">";"</span>.join(cc)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mail.CC = cc</span><br><span class="line"></span><br><span class="line">    mail.Subject = subject</span><br><span class="line">    mail.HtmlBody = body</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> auto:</span><br><span class="line">        mail.send</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mail.Display(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_outlook</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    오피스 버전에 따라 위치는 조금씩 다름</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subprocess.call([<span class="string">'c:\Program Files\Microsoft Office\Office14\Outlook.exe'</span>])</span><br><span class="line">        os.system([<span class="string">'c:\Program Files\Microsoft Office\Office14\Outlook.exe'</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Outlook open 실패!!!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># outlook이 실행중이면 flag = 1, 아니면 flag = 0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> psutil.pids():</span><br><span class="line">    p = psutil.Process(item)</span><br><span class="line">    <span class="keyword">if</span> p.name() == <span class="string">"Outlook.com"</span>:</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag != <span class="number">1</span>):</span><br><span class="line">    open_outlook()</span><br><span class="line"></span><br><span class="line">send_email(<span class="string">"제목"</span>,<span class="string">"이메일 발송 테스트"</span>,<span class="string">"gdhong@abcdef.com"</span>, <span class="string">"wcjeon@abcdef.com"</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;stackoverflow등 인터넷을 뒤지면서 찾은 python으로 email 보내는 소스입니다.&lt;br&gt;pywin을 사용할 수도 있는 것 같은데 아래 소스는 win32를 이용한 방법입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight pyt
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
    
      <category term="Outlook" scheme="http://philm2k.github.io/tags/Outlook/"/>
    
      <category term="H2" scheme="http://philm2k.github.io/tags/H2/"/>
    
      <category term="Send Email" scheme="http://philm2k.github.io/tags/Send-Email/"/>
    
  </entry>
  
  <entry>
    <title>엑셀가공하여 자동 이메일 발송하기</title>
    <link href="http://philm2k.github.io/2018/03/28/defect-auto-emailer/"/>
    <id>http://philm2k.github.io/2018/03/28/defect-auto-emailer/</id>
    <published>2018-03-27T15:17:42.000Z</published>
    <updated>2018-04-21T06:56:37.137Z</updated>
    
    <content type="html"><![CDATA[<p>ㅋㅋㅋ 오늘은 제가 하는 일에 pandas와 python을 접목시켜 직원들을 괴롭히는(?) 자동화 프로그램을 하나 작성했습니다.</p><h1 id="프로그램-개요"><a href="#프로그램-개요" class="headerlink" title="프로그램 개요"></a>프로그램 개요</h1><ul><li><p>테스트관리도구에서 selenium을 이용해서 결함내역을 scrapping</p></li><li><p>pandas의 read_excel로 읽어들여서 필요한 파일만 dataframe에 저장</p></li><li><p>PC의 outlook을 실행</p></li><li><p>2번에서 생성한 DataFrame을 Filtering해서 각 담당자들에게 자신에게 할당된 해결되지 않은 결함을 자동으로 메일 발송</p></li></ul><p>소스코드는 아래에 곧 공개하겠습니다. ^^</p><h2 id="1-selenium을-이용해서-web-scrapping"><a href="#1-selenium을-이용해서-web-scrapping" class="headerlink" title="1. selenium을 이용해서 web scrapping"></a>1. selenium을 이용해서 web scrapping</h2><h2 id="2-pd-read-excel로-필요한-column만-DataFrame에-Load"><a href="#2-pd-read-excel로-필요한-column만-DataFrame에-Load" class="headerlink" title="2. pd.read_excel로 필요한 column만 DataFrame에 Load"></a>2. pd.read_excel로 필요한 column만 DataFrame에 Load</h2><h2 id="3-PC의-outlook-실행"><a href="#3-PC의-outlook-실행" class="headerlink" title="3. PC의 outlook 실행"></a>3. PC의 outlook 실행</h2><a href="/2018/03/29/send-email-with-outlook/" title="outlook으로 이메일 보내기">outlook으로 이메일 보내기</a> 참고<br><a href="/2018/03/31/python-how-to-C/" title="Python How-To(C)">Python How-To(C)</a><h2 id="4-2번에서-생성한-DataFrame을-가공해서-각-담당자에게-자동-이메일-발송"><a href="#4-2번에서-생성한-DataFrame을-가공해서-각-담당자에게-자동-이메일-발송" class="headerlink" title="4. 2번에서 생성한 DataFrame을 가공해서 각 담당자에게 자동 이메일 발송"></a>4. 2번에서 생성한 DataFrame을 가공해서 각 담당자에게 자동 이메일 발송</h2><h3 id="Related-Postsㅗㄷㅌ"><a href="#Related-Postsㅗㄷㅌ" class="headerlink" title="Related Postsㅗㄷㅌ"></a>Related Postsㅗㄷㅌ</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ㅋㅋㅋ 오늘은 제가 하는 일에 pandas와 python을 접목시켜 직원들을 괴롭히는(?) 자동화 프로그램을 하나 작성했습니다.&lt;/p&gt;
&lt;h1 id=&quot;프로그램-개요&quot;&gt;&lt;a href=&quot;#프로그램-개요&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Data Science" scheme="http://philm2k.github.io/categories/Data-Science/"/>
    
      <category term="Pandas" scheme="http://philm2k.github.io/categories/Data-Science/Pandas/"/>
    
    
      <category term="Excel" scheme="http://philm2k.github.io/tags/Excel/"/>
    
      <category term="Outlook" scheme="http://philm2k.github.io/tags/Outlook/"/>
    
      <category term="Automation" scheme="http://philm2k.github.io/tags/Automation/"/>
    
  </entry>
  
  <entry>
    <title>Python How-To(D)</title>
    <link href="http://philm2k.github.io/2018/03/22/python-how-to-D/"/>
    <id>http://philm2k.github.io/2018/03/22/python-how-to-D/</id>
    <published>2018-03-21T15:00:58.000Z</published>
    <updated>2018-04-21T06:56:37.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h2><ul><li>숫자형</li><li>시퀀스형</li><li>매핑형<ul><li>딕셔너리(dict): Mutable</li></ul></li><li>Set형<ul><li>set: Mutable</li><li>frozenset: Immutable</li></ul></li></ul><h2 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h2><p>함수를 인자로 받아서 추가적인 작업을 함수 전/후에 해서 인자로 받은 함수를 포함한 결과를 return하는 함수<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorater_function</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inside_deco_function</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"Do something befor func()"</span>)</span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">"Do something after func()"</span>)</span><br><span class="line">    <span class="keyword">return</span> inside_deco_function</span><br></pre></td></tr></table></figure></p><p>목적은 이미 만들어져 있는 기존의 함수를 수정하지 않고도 래퍼(Wrapper)함수를 이용하여 여러가지 기능을 추가할 수 있기 때문입니다. 예를 들어</p><ul><li>인증처리</li><li>로그 남기는 기능 추가 등</li></ul><p>사용방법은 다음과 같습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator_function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + x</span><br></pre></td></tr></table></figure></p><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><ul><li>매핑 자료형</li><li>원소들을 검색할 때 index가 아닌 key로 접근해서 처리</li><li>키는 유일해야 함</li><li>따라서 key를 생성할 때 hash 알고리즘을 통해 유일한 값만 구성</li></ul><h2 id="dict-get-…-vs-dict-setdefault"><a href="#dict-get-…-vs-dict-setdefault" class="headerlink" title="dict.get(…) vs. dict.setdefault"></a>dict.get(…) vs. dict.setdefault</h2><h3 id="dict-get-key-defaultvalue"><a href="#dict-get-key-defaultvalue" class="headerlink" title="dict.get(key, defaultvalue)"></a>dict.get(key, defaultvalue)</h3><p>첫 번째 인자를 가지고 dict에서 value를 가지고 오는 함수<br>두 번째 인자가 없다면 key에 해당하는 value가 없을 경우 None을 반환, 두 번째 인자를 지정하는 경우 key에 해당하는 value가 없는 경우 defaultvalue를 가져 옴<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aaa = &#123;<span class="string">'name'</span>:<span class="string">'hong'</span>, <span class="string">'phone'</span>:<span class="string">'01012345678'</span>, <span class="string">'birth'</span>:<span class="string">'0323'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">'name'</span>)</span><br><span class="line"><span class="string">'hong'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">'phone'</span>)</span><br><span class="line"><span class="string">'01012345678'</span></span><br></pre></td></tr></table></figure></p><h3 id="dict-setefault"><a href="#dict-setefault" class="headerlink" title="dict.setefault"></a>dict.setefault</h3><p>검색키가 존재하면 해당 키에 대한 값을 가져 오고, 존재하지 않으면 기본값으로 해당 키를 생성한 후 기본값을 반환</p><h2 id="Duck-Typing"><a href="#Duck-Typing" class="headerlink" title="Duck Typing"></a>Duck Typing</h2><blockquote><p>객체의 클래스나 인터페이스 선언에 상관없이 매서드를 적절히 구현하면 어떠한 객체에도 함수를 호출할 수 있는 다형성(polymorphism)의 한 형태</p><footer><strong>루시아누 하말류</strong><cite>전문가를 위한 파이썬(fluent Python) 부록B 파이선 용어</cite></footer></blockquote><blockquote><p>컴퓨터 프로그래밍 분야에서 덕 타이핑(duck typing)은 동적 타이핑의 한 종류로, 객체의 변수 및 메소드의 집합이 객체의 타입을 결정하는 것을 말한다. 클래스 상속이나 인터페이스 구현으로 타입을 구분하는 대신, 덕 타이핑은 객체가 어떤 타입에 걸맞은 변수와 메소드를 지니면 객체를 해당 타입에 속하는 것으로 간주한다. “덕 타이핑”이라는 용어는 다음과 같이 표현될 수 있는 덕 테스트에서 유래했다. (덕은 영어로 오리를 의미한다.)</p><footer><strong>위키백과</strong><cite><a href="https://ko.wikipedia.org/wiki/%EB%8D%95_%ED%83%80%EC%9D%B4%ED%95%91" target="_blank" rel="noopener">Duck Typing</a></cite></footer></blockquote><blockquote><p>만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라고 부를 것이다.</p></blockquote><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;D&quot;&gt;&lt;a href=&quot;#D&quot; class=&quot;headerlink&quot; title=&quot;D&quot;&gt;&lt;/a&gt;D&lt;/h1&gt;&lt;h2 id=&quot;Data-Model&quot;&gt;&lt;a href=&quot;#Data-Model&quot; class=&quot;headerlink&quot; title=&quot;Data Mode
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
      <category term="용어" scheme="http://philm2k.github.io/categories/Python/%EC%9A%A9%EC%96%B4/"/>
    
    
      <category term="H2" scheme="http://philm2k.github.io/tags/H2/"/>
    
      <category term="D" scheme="http://philm2k.github.io/tags/D/"/>
    
  </entry>
  
  <entry>
    <title>파이썬 How-To</title>
    <link href="http://philm2k.github.io/2018/03/21/python-how-to/"/>
    <id>http://philm2k.github.io/2018/03/21/python-how-to/</id>
    <published>2018-03-20T15:53:15.000Z</published>
    <updated>2018-04-21T06:56:37.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="First-Class-Function-일급함수"><a href="#First-Class-Function-일급함수" class="headerlink" title="First Class Function(일급함수)"></a>First Class Function(일급함수)</h2><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h1 id="H"><a href="#H" class="headerlink" title="H"></a>H</h1><h2 id="Higher-Order-Function-고위함수"><a href="#Higher-Order-Function-고위함수" class="headerlink" title="Higher Order Function(고위함수)"></a>Higher Order Function(고위함수)</h2><h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h1 id="K"><a href="#K" class="headerlink" title="K"></a>K</h1><h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><h1 id="M"><a href="#M" class="headerlink" title="M"></a>M</h1><h1 id="N"><a href="#N" class="headerlink" title="N"></a>N</h1><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><h1 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h1><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><h1 id="U"><a href="#U" class="headerlink" title="U"></a>U</h1><h1 id="V"><a href="#V" class="headerlink" title="V"></a>V</h1><h1 id="W"><a href="#W" class="headerlink" title="W"></a>W</h1><h1 id="X"><a href="#X" class="headerlink" title="X"></a>X</h1><h1 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h1><h2 id="yield-yield-from"><a href="#yield-yield-from" class="headerlink" title="yield, yield from"></a>yield, yield from</h2><h1 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><ul><li><a href="/2018/03/31/python-how-to-C/" title="Python How-To(C)">Python How-To(C)</a></li><li><a href="/2018/03/22/python-how-to-D/" title="Python How-To(D)">Python How-To(D)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h1&gt;&lt;h1 id=&quot;B&quot;&gt;&lt;a href=&quot;#B&quot; class=&quot;headerlink&quot; title=&quot;B&quot;&gt;&lt;/a&gt;B&lt;/h1&gt;&lt;h1 id=&quot;E&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
      <category term="용어" scheme="http://philm2k.github.io/categories/Python/%EC%9A%A9%EC%96%B4/"/>
    
    
      <category term="H2" scheme="http://philm2k.github.io/tags/H2/"/>
    
  </entry>
  
  <entry>
    <title>jupyter file을 hexo blog에서 보기(작성중)</title>
    <link href="http://philm2k.github.io/2018/03/18/pandas-with-jupyter/"/>
    <id>http://philm2k.github.io/2018/03/18/pandas-with-jupyter/</id>
    <published>2018-03-18T10:01:57.000Z</published>
    <updated>2018-04-21T06:56:37.138Z</updated>
    
    <content type="html"><![CDATA[<p>참고 싸이트</p><p><a href="https://www.npmjs.com/package/hexo-jupyter-notebook" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-jupyter-notebook</a></p><p><a href="https://hexo.io/ko/docs/asset-folders.html" target="_blank" rel="noopener">https://hexo.io/ko/docs/asset-folders.html</a></p><p><a href="https://www.npmjs.com/package/hexo-ipynb" target="_blank" rel="noopener">https://www.npmjs.com/package/hexo-ipynb</a></p><p>이게 모듈이라는데 사용방법을 모르겠네요 ㅠㅠ</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;참고 싸이트&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/hexo-jupyter-notebook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/package/
      
    
    </summary>
    
      <category term="Tips &amp; Refs" scheme="http://philm2k.github.io/categories/Tips-Refs/"/>
    
      <category term="Tips" scheme="http://philm2k.github.io/categories/Tips-Refs/Tips/"/>
    
    
      <category term="hexo" scheme="http://philm2k.github.io/tags/hexo/"/>
    
      <category term="jupyter notebook" scheme="http://philm2k.github.io/tags/jupyter-notebook/"/>
    
  </entry>
  
  <entry>
    <title>Hexo블로그 관리:두개의 Repositories로 배포와 운영을 관리하기(Window) - 다소 불완전하지만...</title>
    <link href="http://philm2k.github.io/2018/03/18/hexo-with-two-repos/"/>
    <id>http://philm2k.github.io/2018/03/18/hexo-with-two-repos/</id>
    <published>2018-03-18T04:17:04.000Z</published>
    <updated>2018-04-21T06:56:37.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="고민의-시작"><a href="#고민의-시작" class="headerlink" title="고민의 시작"></a>고민의 시작</h1><p>Hexo로 github에 blog를 만든 것 까지는 좋았습니다. 그런데 형편에 따라 오늘은 집에 있는 PC에서 블로그 글을 작성하다가, 내일은 상암동에 있는 개발실의 PC에서 작업하고 하는 일이 있었습니다.<br>hexo g -d로 배포하는 경우 “githubid”.github.io repository에는 생성된 정적인 페이지만 배포가 되기 때문에 xxx.md로 작성된 post나 page는 별도의 저장소에 수작업으로 관리하게 되었습니다.<br>이거 해보시면 압니다.  무지 불편하거든요 ^^</p><p>결론은 아래 방법도 완전하지는 않네요… 다른 PC에서 동일하게 하니 오류가 있었습니다.<br>결국 hueman의 _config.yml이 받아지지 않았더군요… 다른 곳에 두었던 것을 복사해 주니 해결은 됐는데… 찝찝합니다.</p><h2 id="절차는-다음과-같습니다"><a href="#절차는-다음과-같습니다" class="headerlink" title="절차는 다음과 같습니다."></a>절차는 다음과 같습니다.</h2><ol><li>블로그 소스를 저장할 repository를 만든다. 저의 경우는 hexo-blog-src로 했습니다.</li><li>github page를 배포할 reoository를 만든다. “githubid”.github.io로 하는 것은 아시죠? ^^</li><li>1번에서 만든 repository를 local에 clone한다.(GitHub Desktop을 사용하시면 나름 편리합니다.)<br>4, 5번은 다음을 참고하시기 바랍니다.<blockquote><p>Hexo로 블로그를 시작했습니다. 다른 분들의 링크는 다소 내용이 빠져있어서 좀 헷갈렸는데, 이 포스트는 한 방에 잘 되더군요. 참 쉽네요 ^^ </p><footer><strong>Eric Han</strong><cite><a href="http://futurecreator.github.io/2016/06/14/get-started-with-hexo/" target="_blank" rel="noopener">워드프레스보다 쉬운 Hexo 블로그 시작하기</a></cite></footer></blockquote></li><li>local에 clone된 곳(예를 들어 c:\hexo-blog-src)으로 가서 hexo 블로그를 만든다. 예를 들면…<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:\hexo-blog-src\hexo init</span><br><span class="line">c:\hexo-blog-src\npm instal hexo-cli</span><br><span class="line">... 등등</span><br></pre></td></tr></table></figure></li><li>hexo 배포를 위한 git 설정을 합니다.</li><li>그리고 themes를 git clone 명령을 이용하신 경우 해당 theme 폴더에 가 보시면 .git 폴더를 삭제하여 일반폴더로 만들어 주셔야 합니다. theme을 여러개 사용하신 경우 theme 폴더마다 들어가서 해주셔야 합니다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c:\hexo-blog-src\cd themes</span><br><span class="line">c:\hexo-blog-src\themes\cd hueman (예를 들어 hueman theme을 쓰신 경우)</span><br><span class="line">c:\hexo-blog-src\themes\hueman\del .git</span><br><span class="line">... 등등</span><br></pre></td></tr></table></figure></li><li>마지막으로 hexo d를 이용해 배포를 하시는 경우 .deploy_git 폴더가 생성되는데 이 것을 .gitignore에 추가해 주셔야 합니다. 제일 상단에 추가해 주세요 ^^<figure class="highlight plain"><figcaption><span>.gitignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.deploy_git/ &lt;== 요기처럼 ^^</span><br><span class="line"># Logs</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="소스관리와-배포관리"><a href="#소스관리와-배포관리" class="headerlink" title="소스관리와 배포관리"></a>소스관리와 배포관리</h2><ul><li>소스는 다음의 명령으로 git push<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:\hexo-blog-src\git add .</span><br><span class="line">c:\hexo-blog-src\git commit -m &quot;commit message&quot;</span><br><span class="line">c:\hexo-blog-src\git push origin master</span><br></pre></td></tr></table></figure></li><li>페이지 배포는 hexo g -d로 해결</li></ul><h3 id="특이사항"><a href="#특이사항" class="headerlink" title="특이사항"></a>특이사항</h3><p>포스트를 작성하고 배포하기 전에 소스 repository에 commit만 하고 sync를 하지 않은 상태에서는 hexo d가 알수 없는 오류가 납니다. 그러니, 블로그에 배포가 끝난 후에 commit하고 sync하는 것이 좋을 것 같습니다.</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;고민의-시작&quot;&gt;&lt;a href=&quot;#고민의-시작&quot; class=&quot;headerlink&quot; title=&quot;고민의 시작&quot;&gt;&lt;/a&gt;고민의 시작&lt;/h1&gt;&lt;p&gt;Hexo로 github에 blog를 만든 것 까지는 좋았습니다. 그런데 형편에 따라 오늘은 집에 
      
    
    </summary>
    
      <category term="Tips &amp; Refs" scheme="http://philm2k.github.io/categories/Tips-Refs/"/>
    
      <category term="Tips" scheme="http://philm2k.github.io/categories/Tips-Refs/Tips/"/>
    
    
      <category term="hexo" scheme="http://philm2k.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>generator</title>
    <link href="http://philm2k.github.io/2018/03/12/generator/"/>
    <id>http://philm2k.github.io/2018/03/12/generator/</id>
    <published>2018-03-11T15:26:34.000Z</published>
    <updated>2018-04-21T06:56:37.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Cookbook-4-14"><a href="#Python-Cookbook-4-14" class="headerlink" title="Python Cookbook 4.14"></a>Python Cookbook 4.14</h1><h2 id="방대한-양의-로그-파일이-들어-있는-디렉터리에서-작업"><a href="#방대한-양의-로그-파일이-들어-있는-디렉터리에서-작업" class="headerlink" title="방대한 양의 로그 파일이 들어 있는 디렉터리에서 작업"></a>방대한 양의 로그 파일이 들어 있는 디렉터리에서 작업</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> bz2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_find</span><span class="params">(filepat, top)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    디렉터리 트리에서 와일드카드 패턴에 매칭하는 모든 파일 이름을 찾는다.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> path, dirlist, filelist <span class="keyword">in</span> os.walk(top):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> fnmatch.filter(filelist, filepat):</span><br><span class="line">            <span class="keyword">yield</span> os.path.join(path, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_opener</span><span class="params">(filenames)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    파일 이름 시퀀스를 하나씩 열어 파일 객체를 생성한다.</span></span><br><span class="line"><span class="string">    다음 순환으로 넘어가는 파일을 닫는다.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">'.gz'</span>):</span><br><span class="line">            f = gzip.open(filename, <span class="string">'rt'</span>)</span><br><span class="line">        <span class="keyword">elif</span> filename.endswith(<span class="string">'.bz2'</span>):</span><br><span class="line">            f = bz2.open(filename, <span class="string">'rt'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f = open(filename, <span class="string">'rt'</span>)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_concatenate</span><span class="params">(iterators)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    이터레이터 시퀀스를 합쳐 하나의 시퀀스를 만든다.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterators:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> it</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_grep</span><span class="params">(pattern, lines)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    라인 시퀀스에서 정규식 패턴을 살펴본다.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    pat = re.compile(pattern)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> pat.search(line):</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h2 id="로그-분석"><a href="#로그-분석" class="headerlink" title="로그 분석(?)"></a>로그 분석(?)</h2><p>이제 이 함수들을 이용해 python이란 단어를 포함하고 있는 모든 로그 라인을 찾으려면 다음과 같이 한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lognames = gen_find(<span class="string">'access-log*'</span>, <span class="string">'www'</span>)</span><br><span class="line">files = gen_opener(lognames)</span><br><span class="line">lines = gen_concatenate(files)</span><br><span class="line">pylines = gen_grep(<span class="string">'(?i)python'</span>, lines)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> pylines:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><p>또는 제너레이터 표현식을 써서 다음과 같이 확장할 수 있다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lognames = gen_find(<span class="string">'access-log*'</span>, <span class="string">'www'</span>)</span><br><span class="line">files = gen_opener(lognames)</span><br><span class="line">lines = gen_concatenate(files)</span><br><span class="line">pylines = gen_grep(<span class="string">'(?i)python'</span>, lines)</span><br><span class="line">bytecolumn = (line.rsplit(<span class="keyword">None</span>, <span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> pylines)</span><br><span class="line">bytes = (int(x) <span class="keyword">for</span> x <span class="keyword">in</span> bytecolumn <span class="keyword">if</span> x != <span class="string">'-'</span>)</span><br><span class="line">print(<span class="string">'Total'</span>, sum(bytes))</span><br></pre></td></tr></table></figure></p><h2 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Cookbook-4-14&quot;&gt;&lt;a href=&quot;#Python-Cookbook-4-14&quot; class=&quot;headerlink&quot; title=&quot;Python Cookbook 4.14&quot;&gt;&lt;/a&gt;Python Cookbook 4.14&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
    
      <category term="generator" scheme="http://philm2k.github.io/tags/generator/"/>
    
      <category term="yield" scheme="http://philm2k.github.io/tags/yield/"/>
    
      <category term="yield from" scheme="http://philm2k.github.io/tags/yield-from/"/>
    
  </entry>
  
  <entry>
    <title>정규표현식 기본</title>
    <link href="http://philm2k.github.io/2018/03/11/regex-ref/"/>
    <id>http://philm2k.github.io/2018/03/11/regex-ref/</id>
    <published>2018-03-11T14:29:16.000Z</published>
    <updated>2018-04-21T06:56:37.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정규표현식에-대한-기본"><a href="#정규표현식에-대한-기본" class="headerlink" title="정규표현식에 대한 기본"></a>정규표현식에 대한 기본</h1><p>정규표현식을 접한 지는 꽤 오래되었지만 역시 실전에서 사용하지 않고 눈에 익히기 어려워서  자꾸 잊어먹고 아직 마스터도 못하고 있었습니다. ^^</p><h2 id="문자클래스"><a href="#문자클래스" class="headerlink" title="문자클래스"></a>문자클래스</h2><table><thead><tr><th>기호</th><th style="text-align:left">클래스 의미</th></tr></thead><tbody><tr><td>\d</td><td style="text-align:left">0에서 9까지의 임의의 숫자 글자</td></tr><tr><td>\D</td><td style="text-align:left">\d에 해당되지 않는 모든 글자</td></tr><tr><td>\w</td><td style="text-align:left">문자, 숫자 글자 또는 밑줄 글자</td></tr><tr><td>\W</td><td style="text-align:left">\w에 해당되지 않는 모든 글자</td></tr><tr><td>\s</td><td style="text-align:left">빈칸, 탭 또는 줄바꿈 문자</td></tr><tr><td>\S</td><td style="text-align:left">\s에 해당되지 않는 모든 글자</td></tr></tbody></table><h2 id="대괄호-를-사용한-사용자-정의-문자-클래스"><a href="#대괄호-를-사용한-사용자-정의-문자-클래스" class="headerlink" title="대괄호([ ])를 사용한 사용자 정의 문자 클래스"></a>대괄호([ ])를 사용한 사용자 정의 문자 클래스</h2><table><thead><tr><th>기호</th><th style="text-align:left">클래스 의미</th></tr></thead><tbody><tr><td>-</td><td style="text-align:left">범위를 지정 예) [0-5]: 0~5 사이이 숫자 글자</td></tr><tr><td>^</td><td style="text-align:left">범위가 아닌 것의 의미 예)[^aeiouAEIOU]: 대문자든 소문자든 모음이 아닌 글자</td></tr></tbody></table><blockquote><p>대괄호 안에서는 escape문자를 쓸 필요가 없음</p></blockquote><h2 id="시작과-끝"><a href="#시작과-끝" class="headerlink" title="시작과 끝"></a>시작과 끝</h2><table><thead><tr><th>기호</th><th style="text-align:left">클래스 의미</th></tr></thead><tbody><tr><td>^</td><td style="text-align:left">시작부분에서 일치하는 문자열이 나와야 함 예) ^Hi: Hi로 시작하는 문자열</td></tr><tr><td>$</td><td style="text-align:left">끝나는 부분에 일치하는 문자열이 나와야 함 예) \d$: 끝이 0~9 사이의 숫자 글자</td></tr></tbody></table><h2 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;정규표현식에-대한-기본&quot;&gt;&lt;a href=&quot;#정규표현식에-대한-기본&quot; class=&quot;headerlink&quot; title=&quot;정규표현식에 대한 기본&quot;&gt;&lt;/a&gt;정규표현식에 대한 기본&lt;/h1&gt;&lt;p&gt;정규표현식을 접한 지는 꽤 오래되었지만 역시 실전에서 
      
    
    </summary>
    
      <category term="Tips &amp; Refs" scheme="http://philm2k.github.io/categories/Tips-Refs/"/>
    
      <category term="Refs" scheme="http://philm2k.github.io/categories/Tips-Refs/Refs/"/>
    
    
      <category term="Regular Expressions" scheme="http://philm2k.github.io/tags/Regular-Expressions/"/>
    
  </entry>
  
  <entry>
    <title>datetime</title>
    <link href="http://philm2k.github.io/2018/03/01/datetime/"/>
    <id>http://philm2k.github.io/2018/03/01/datetime/</id>
    <published>2018-03-01T12:59:26.000Z</published>
    <updated>2018-04-29T06:25:00.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="다양한-형태의-날짜-정보-가져오기"><a href="#다양한-형태의-날짜-정보-가져오기" class="headerlink" title="다양한 형태의 날짜 정보 가져오기"></a>다양한 형태의 날짜 정보 가져오기</h1><p>아래 세가지 형태의 날짜 형태만 가져오면 문제가 없더군요.. ^^<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datatime <span class="keyword">import</span> datetime</span><br><span class="line">dt0 = datetime.now().strftime(<span class="string">'%y%m%d'</span>)       <span class="comment"># 180301</span></span><br><span class="line">dt1 = datetime.now().strftime(<span class="string">'%Y%m%d'</span>)       <span class="comment"># 20180301</span></span><br><span class="line">dt2 = datetime.now().strftime(<span class="string">'%Y%m%d-%H%M'</span>)  <span class="comment"># 20180301-22:04</span></span><br></pre></td></tr></table></figure></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;다양한-형태의-날짜-정보-가져오기&quot;&gt;&lt;a href=&quot;#다양한-형태의-날짜-정보-가져오기&quot; class=&quot;headerlink&quot; title=&quot;다양한 형태의 날짜 정보 가져오기&quot;&gt;&lt;/a&gt;다양한 형태의 날짜 정보 가져오기&lt;/h1&gt;&lt;p&gt;아래 세가지
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
    
      <category term="datetime" scheme="http://philm2k.github.io/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>Pandas로 엑셀파일 다루기</title>
    <link href="http://philm2k.github.io/2018/02/27/pandas/"/>
    <id>http://philm2k.github.io/2018/02/27/pandas/</id>
    <published>2018-02-26T15:53:10.000Z</published>
    <updated>2018-04-21T06:56:37.139Z</updated>
    
    <content type="html"><![CDATA[<p>기업체나 학교에서도 거의 모든 사람들이 쓰는 소프트웨어가 Excel입니다. 간단한 통계나 보고서용 표 정리를 위해 엑셀의 계산 기능을 많이 들 사용합니다.<br>pandas를 이용하시면 다양하게 Excel의 데이터를 가공하고 다시 Excel로 저장이 가능합니다.</p><p>다음은 IMDB에서 제공하는 movie data excel 파일입니다. 여기(<a href="https://www.dataquest.io/blog/large_files/movies.xls" target="_blank" rel="noopener">https://www.dataquest.io/blog/large_files/movies.xls</a>) 에서 다운로드 하실 수 있습니다.<br><img src="/2018/02/27/pandas/movies.JPG" title="Example"></p><h1 id="Excel-읽어서-DataFrame에-넣기"><a href="#Excel-읽어서-DataFrame에-넣기" class="headerlink" title="Excel 읽어서 DataFrame에 넣기"></a>Excel 읽어서 DataFrame에 넣기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> np</span><br><span class="line">BASE_PATH = <span class="string">"d:/dev"</span></span><br><span class="line">FILE_NAME = <span class="string">"abc.xlsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(join(BASE_PATH, FILE_NAME))</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><h2 id="header-2"><a href="#header-2" class="headerlink" title="header=2"></a>header=2</h2><p>엑셀을 읽어들이다 보면 첫 번째 행이 header가 아닌 경우가 있습니다. 이 때 사용하는 option입니다. header=2의 의미는 3번째 행이 데이터의 header라는 의미입니다. 위의 코드를 고쳐보면 다음과 같습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> np</span><br><span class="line">BASE_PATH = <span class="string">"d:/dev"</span></span><br><span class="line">FILE_NAME = <span class="string">"abc.xlsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(join(BASE_PATH, FILE_NAME),header=<span class="number">2</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></p><h2 id="sheetname-None"><a href="#sheetname-None" class="headerlink" title="sheetname=None"></a>sheetname=None</h2><p>Excel파일의 sheet가 여러 개인 경우 sheetname=None을 주고 read_excel을 실행시키면 엑셀파일 내의 모든 sheet를 읽어서 DataFrame으로 이루어진 Dict 객체를 반환합니다. 코드들 고쳐보겠습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> np</span><br><span class="line">BASE_PATH = <span class="string">"d:/dev"</span></span><br><span class="line">FILE_NAME = <span class="string">"abc.xlsx"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(join(BASE_PATH, FILE_NAME), sheetname=<span class="keyword">None</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure></p><h2 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h2><blockquote><p>10분 만에 익히는 pandas 기본</p><footer><strong>pandas 0.22.0 documentation</strong><cite><a href="https://pandas.pydata.org/pandas-docs/stable/10min.html#min" target="_blank" rel="noopener">10 Minutes to pandas</a></cite></footer></blockquote><blockquote><p>IMDB에서 제공하는 Excel로 pandas로 엑셀을 다루는 주요 Technique과 잘 설명하고  있습니다. </p><footer><strong>Harish Garg</strong><cite><a href="https://www.dataquest.io/blog/excel-and-pandas/" target="_blank" rel="noopener">Using Excel with pandas</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;기업체나 학교에서도 거의 모든 사람들이 쓰는 소프트웨어가 Excel입니다. 간단한 통계나 보고서용 표 정리를 위해 엑셀의 계산 기능을 많이 들 사용합니다.&lt;br&gt;pandas를 이용하시면 다양하게 Excel의 데이터를 가공하고 다시 Excel로 저
      
    
    </summary>
    
      <category term="Data Science" scheme="http://philm2k.github.io/categories/Data-Science/"/>
    
      <category term="Pandas" scheme="http://philm2k.github.io/categories/Data-Science/Pandas/"/>
    
    
      <category term="Excel" scheme="http://philm2k.github.io/tags/Excel/"/>
    
      <category term="Python" scheme="http://philm2k.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 정규표현식 기본</title>
    <link href="http://philm2k.github.io/2018/02/25/regex/"/>
    <id>http://philm2k.github.io/2018/02/25/regex/</id>
    <published>2018-02-25T14:49:54.000Z</published>
    <updated>2018-04-21T06:56:37.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정규표현식을-이용하여-요즘-하고-있는-일"><a href="#정규표현식을-이용하여-요즘-하고-있는-일" class="headerlink" title="정규표현식을 이용하여 요즘 하고 있는 일"></a>정규표현식을 이용하여 요즘 하고 있는 일</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">icRegex = re.compile(<span class="string">r'BOCOM\d\d\d\d\d'</span>)</span><br><span class="line">txt = <span class="string">"This is 책임자승인(BOCOM00001)!!! That is 책임자승인(BOCOM00201)!!!"</span></span><br><span class="line">mo = icRegex.search(txt)</span><br><span class="line">print(mo.group())</span><br></pre></td></tr></table></figure><p>이 코드를 실행하면 결과는 “BOCOM00001”입니다.</p><p>txt의 문장과 같은 코드가 들어 있는 약 20,000개의 파일을 하나씩 열어서 정규표현식으로 찾고 pandas를 이용하여 Excel로 저장하는데 10분이 채 안 걸립니다. ^^</p><p>위의 내용을 잘 보시면 다음의 단계를 거친 것을 알 수 있습니다.</p><h2 id="Python의-정규표현식-사용의-단계"><a href="#Python의-정규표현식-사용의-단계" class="headerlink" title="Python의 정규표현식 사용의 단계"></a>Python의 정규표현식 사용의 단계</h2><ul><li>import re로 정규식 모듈을 가져온다.</li><li>re.compile() 함수로 Regex 개체를 만든다.</li><li>검색할 문자열을 Regex 개체의 search() 메소드로 전달하여 Match 객체를 돌려받는다.</li><li>Match 개체의 group()메소드를 호출해서 실제 일치하는 텍스트 문자열을 돌려받는다.</li></ul><h2 id="search-vs-findall"><a href="#search-vs-findall" class="headerlink" title="search() vs. findall()"></a>search() vs. findall()</h2><ul><li>search()는 검색하는 문자열에서 처음으로 나타나는 일치하는 텍스트의 Match 개체를 return</li><li>findall() 메소드는 검색 문자열에서 일치하는 모든 문자열을 return</li></ul><p>다시 말해서 위의 코드에서 search() 대신 findall()을 사용할 경우의 답은 [‘BOCOM00001’, ‘BOCOM00201’]입니다.<br>코드는 약간 다릅니다. 맞게 써보면 다음과 같습니다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">icRegex = re.compile(<span class="string">r'BOCOM\d\d\d\d\d'</span>)</span><br><span class="line">txt = <span class="string">"This is 책임자승인(BOCOM00001)!!! That is 책임자승인(BOCOM00201)!!!"</span></span><br><span class="line">print(icRegex.findall(txt))</span><br></pre></td></tr></table></figure></p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3><blockquote><p>Dave Child의 정규표현식에 대한 요약 자료입니다. </p><footer><strong>Dave Child</strong><cite><a href="https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" target="_blank" rel="noopener">Regular Expression Cheatsheet</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;정규표현식을-이용하여-요즘-하고-있는-일&quot;&gt;&lt;a href=&quot;#정규표현식을-이용하여-요즘-하고-있는-일&quot; class=&quot;headerlink&quot; title=&quot;정규표현식을 이용하여 요즘 하고 있는 일&quot;&gt;&lt;/a&gt;정규표현식을 이용하여 요즘 하고 있는
      
    
    </summary>
    
      <category term="Python" scheme="http://philm2k.github.io/categories/Python/"/>
    
    
      <category term="Regular Expressions" scheme="http://philm2k.github.io/tags/Regular-Expressions/"/>
    
  </entry>
  
  <entry>
    <title>Hello World(자동생성)</title>
    <link href="http://philm2k.github.io/2018/02/20/hello-world/"/>
    <id>http://philm2k.github.io/2018/02/20/hello-world/</id>
    <published>2018-02-20T13:45:41.000Z</published>
    <updated>2018-04-21T06:56:37.138Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="퀵-스타트"><a href="#퀵-스타트" class="headerlink" title="퀵 스타트"></a>퀵 스타트</h2><h3 id="새로운-포스트를-생성"><a href="#새로운-포스트를-생성" class="headerlink" title="새로운 포스트를 생성"></a>새로운 포스트를 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="서버-실행"><a href="#서버-실행" class="headerlink" title="서버 실행"></a>서버 실행</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="정정파일-생성"><a href="#정정파일-생성" class="headerlink" title="정정파일 생성"></a>정정파일 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="원격싸이트에-배포"><a href="#원격싸이트에-배포" class="headerlink" title="원격싸이트에 배포"></a>원격싸이트에 배포</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NumPy</title>
    <link href="http://philm2k.github.io/2018/02/18/numpy/"/>
    <id>http://philm2k.github.io/2018/02/18/numpy/</id>
    <published>2018-02-18T14:10:15.000Z</published>
    <updated>2018-04-21T06:56:37.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NumPy-기본이-뭐지"><a href="#NumPy-기본이-뭐지" class="headerlink" title="NumPy 기본이 뭐지"></a>NumPy 기본이 뭐지</h1><p>NumPy  솔직히 공부를 하기는 하는데…. 요즘 Pandas에 푹 바쪄서 NumPy는 왜 공부하는지 모르겠다능 ^^ ㅋㅋㅋ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NumPy-기본이-뭐지&quot;&gt;&lt;a href=&quot;#NumPy-기본이-뭐지&quot; class=&quot;headerlink&quot; title=&quot;NumPy 기본이 뭐지&quot;&gt;&lt;/a&gt;NumPy 기본이 뭐지&lt;/h1&gt;&lt;p&gt;NumPy  솔직히 공부를 하기는 하는데…. 요즘 Pa
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://philm2k.github.io/categories/Machine-Learning/"/>
    
      <category term="Numpy" scheme="http://philm2k.github.io/categories/Machine-Learning/Numpy/"/>
    
    
      <category term="basic" scheme="http://philm2k.github.io/tags/basic/"/>
    
      <category term="NumPy" scheme="http://philm2k.github.io/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>big-data</title>
    <link href="http://philm2k.github.io/2018/02/17/big-data/"/>
    <id>http://philm2k.github.io/2018/02/17/big-data/</id>
    <published>2018-02-17T13:45:41.000Z</published>
    <updated>2018-04-21T06:56:37.137Z</updated>
    
    <content type="html"><![CDATA[<p>Big Data란?  </p><p>무지 big한 데이터를 다루는 것? ^^</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Big Data란?  &lt;/p&gt;
&lt;p&gt;무지 big한 데이터를 다루는 것? ^^&lt;/p&gt;
&lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a href=&quot;#Related-Posts&quot; class=&quot;headerlink&quot; title=&quot;Related Posts&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Data Science" scheme="http://philm2k.github.io/categories/Data-Science/"/>
    
    
      <category term="Big Data" scheme="http://philm2k.github.io/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>machine-learning</title>
    <link href="http://philm2k.github.io/2018/02/17/machine-learning/"/>
    <id>http://philm2k.github.io/2018/02/17/machine-learning/</id>
    <published>2018-02-17T13:45:32.000Z</published>
    <updated>2018-04-21T06:56:37.138Z</updated>
    
    <content type="html"><![CDATA[<p>Machine Learning이란?</p><h3 id="Related-Posts"><a href="#Related-Posts" class="headerlink" title="Related Posts"></a>Related Posts</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Machine Learning이란?&lt;/p&gt;
&lt;h3 id=&quot;Related-Posts&quot;&gt;&lt;a href=&quot;#Related-Posts&quot; class=&quot;headerlink&quot; title=&quot;Related Posts&quot;&gt;&lt;/a&gt;Related Posts&lt;/h3&gt;
      
    
    </summary>
    
      <category term="Machine Learning" scheme="http://philm2k.github.io/categories/Machine-Learning/"/>
    
    
      <category term="machine learning" scheme="http://philm2k.github.io/tags/machine-learning/"/>
    
  </entry>
  
</feed>
